/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardProductIndexRouteImport } from './routes/dashboard/product/index'
import { Route as DashboardOrderIndexRouteImport } from './routes/dashboard/order/index'
import { Route as DashboardClientIndexRouteImport } from './routes/dashboard/client/index'
import { Route as DashboardCatalogIndexRouteImport } from './routes/dashboard/catalog/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardProductIndexRoute = DashboardProductIndexRouteImport.update({
  id: '/product/',
  path: '/product/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardOrderIndexRoute = DashboardOrderIndexRouteImport.update({
  id: '/order/',
  path: '/order/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardClientIndexRoute = DashboardClientIndexRouteImport.update({
  id: '/client/',
  path: '/client/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardCatalogIndexRoute = DashboardCatalogIndexRouteImport.update({
  id: '/catalog/',
  path: '/catalog/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/catalog': typeof DashboardCatalogIndexRoute
  '/dashboard/client': typeof DashboardClientIndexRoute
  '/dashboard/order': typeof DashboardOrderIndexRoute
  '/dashboard/product': typeof DashboardProductIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/catalog': typeof DashboardCatalogIndexRoute
  '/dashboard/client': typeof DashboardClientIndexRoute
  '/dashboard/order': typeof DashboardOrderIndexRoute
  '/dashboard/product': typeof DashboardProductIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/catalog/': typeof DashboardCatalogIndexRoute
  '/dashboard/client/': typeof DashboardClientIndexRoute
  '/dashboard/order/': typeof DashboardOrderIndexRoute
  '/dashboard/product/': typeof DashboardProductIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/login'
    | '/dashboard/'
    | '/dashboard/catalog'
    | '/dashboard/client'
    | '/dashboard/order'
    | '/dashboard/product'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/dashboard'
    | '/dashboard/catalog'
    | '/dashboard/client'
    | '/dashboard/order'
    | '/dashboard/product'
  id:
    | '__root__'
    | '/dashboard'
    | '/login'
    | '/dashboard/'
    | '/dashboard/catalog/'
    | '/dashboard/client/'
    | '/dashboard/order/'
    | '/dashboard/product/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/product/': {
      id: '/dashboard/product/'
      path: '/product'
      fullPath: '/dashboard/product'
      preLoaderRoute: typeof DashboardProductIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/order/': {
      id: '/dashboard/order/'
      path: '/order'
      fullPath: '/dashboard/order'
      preLoaderRoute: typeof DashboardOrderIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/client/': {
      id: '/dashboard/client/'
      path: '/client'
      fullPath: '/dashboard/client'
      preLoaderRoute: typeof DashboardClientIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/catalog/': {
      id: '/dashboard/catalog/'
      path: '/catalog'
      fullPath: '/dashboard/catalog'
      preLoaderRoute: typeof DashboardCatalogIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
  }
}

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardCatalogIndexRoute: typeof DashboardCatalogIndexRoute
  DashboardClientIndexRoute: typeof DashboardClientIndexRoute
  DashboardOrderIndexRoute: typeof DashboardOrderIndexRoute
  DashboardProductIndexRoute: typeof DashboardProductIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardCatalogIndexRoute: DashboardCatalogIndexRoute,
  DashboardClientIndexRoute: DashboardClientIndexRoute,
  DashboardOrderIndexRoute: DashboardOrderIndexRoute,
  DashboardProductIndexRoute: DashboardProductIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
